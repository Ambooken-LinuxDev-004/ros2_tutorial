ros2 pkg list - shows list of packages.

ros2 pkg executables - shows all the executable programs(default) of all the packages.

ros2 pkg executables turtlesim - shows list of executables from turtlesim package.

TO RUN ANY PACKAGE:

ros2 run <packagename> <executablename>
e.g. ros2 run turtlesim turtlesim_node - runs the turtlesim_node of turtlesim package.

ros2 run -h - to find help running packages/executables.

ros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:=turtle2/cmd_vel - to remap/change arguments to control turtle2.

ros2 run turtlesim turtlesim_node --ros-args --remap __node:=my_turtle - reassign name of turtlesim node.

ros2 node info <node_name> - to access more info on node.

ros2 run rqt_graph rqt_graph - to run rqt graph.

ros2 topic list - shows list of topics.

ros2 topic list -t - shows type of topic.

ros2 topic find <topic_type> - to list available topics of given type.

ros2 topic echo <topic_name> - to see data being published on a topic.

ros2 topic info <topic_name> - to check number of publishers and subscribers.

NOTE :- Publishers and subscribers must send and receive the same type of message to communicate.
e.g geometry_msgs/msg/Twist - This means that in the package geometry_msgs there is a msg called Twist.

ros2 topic find geometry_msgs/msg/Twist - To find command outputs topics available when given the message type.


ros2 interface show <msg_type> - to learn specifically, what structure of data the message expects.
e.g. ros2 interface show geometry_msgs/msg/Twist

ros2 topic pub <topic_name> <msg_type> '<args>' - To publish data to a topic directly from the command line.
e.g. ros2 topic pub /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"

ros2 topic pub --once -w 2 /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}" - To publish data to your topic only once.


ros2 service list - will return a list of all the services currently active in the system.

ros2 service type <service_name> - To find out the type of a service.
e.g. ros2 service type /clear - The Empty type means the service call sends no data when making a request and receives no data when receiving a response.

ros2 service list -t - To see the types of all the active services at the same time.

ros2 service find <type_name> - to find all the services of a specific type.
e.g. ros2 service find std_srvs/srv/Empty

ros2 interface show <type_name> - to know the structure of the input arguments.
e.g. ros2 interface show turtlesim/srv/Spawn

ros2 service call <service_name> <service_type> <arguments> - to find a service’s type and to find the structure of that type’s arguments.
(The <arguments> part is optional.)

e.g. ros2 service call /clear std_srvs/srv/Empty - This command will clear the turtlesim window of any lines your turtle has drawn.


ros2 param list - To see the parameters belonging to your nodes.

ros2 param get <node_name> <parameter_name> - To display the type and current value of a parameter.
e.g. ros2 param get /turtlesim background_g

ros2 param set <node_name> <parameter_name> <value> - To change a parameter’s value at runtime.
e.g. ros2 param set /turtlesim background_r 150

ros2 param dump <node_name> - To view all of a node’s current parameter values.

ros2 param dump /turtlesim > turtlesim.yaml - To redirect the parameter values into a file to save them.

ros2 param load <node_name> <parameter_file> - To load parameters from a file to a currently running node.
e.g. ros2 param load /turtlesim turtlesim.yaml

ros2 run <package_name> <executable_name> --ros-args --params-file <file_name> - To start the same node using your saved parameter values.
e.g. ros2 run turtlesim turtlesim_node --ros-args --params-file turtlesim.yaml




